import { IAngle, ILine, IPoint, IVector, TLineValues } from '../types';
import { Figure } from '../abstracts/Figure';
export declare class Line extends Figure implements ILine {
    private _P0;
    private _P1;
    private _V;
    private _reciprocal;
    private _slope;
    private _xIntercept;
    private _yIntercept;
    constructor(values: TLineValues);
    get P0(): IPoint;
    get P1(): IPoint;
    get V(): IVector;
    get a(): number;
    get b(): 1 | 0 | -1;
    get c(): number;
    get isHorizontal(): boolean;
    get isVertical(): boolean;
    get reciprocal(): number | undefined;
    get slope(): number | undefined;
    get xIntercept(): number | undefined;
    get yIntercept(): number | undefined;
    angleTo(line: ILine): IAngle;
    clone(): Line;
    getIntersectionPoint(line: ILine): IPoint | undefined;
    getPerpendicularProjection(point: IPoint): IPoint;
    getPerpendicularThrough(point: IPoint): ILine;
    getPointAtParameter(t: number): IPoint;
    getXValueAtY(y: number): number | undefined;
    getYValueAtX(x: number): number | undefined;
    hasPoint(P: IPoint): boolean;
    isParallelTo(line: ILine): boolean;
    isPerpendicularTo(line: ILine): boolean;
    reflect(about: ILine | IPoint): this;
    rotate(phi: IAngle, about?: IPoint | undefined): this;
    scale(factor: number, about?: IPoint): this;
    translate(vector: IVector): this;
    private computeReciprocal;
    private computeSlope;
    private computeXIntercept;
    private computeYIntercept;
    private recompute;
}
